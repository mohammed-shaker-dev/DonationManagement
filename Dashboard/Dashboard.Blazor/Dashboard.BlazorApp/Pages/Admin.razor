@page "/admin"
@using Dashboard.BlazorApp.Services
@using Microsoft.AspNetCore.Components.Forms
@using SharedKernel.Blazor.Shared
@using SharedKernel.Enums
@using Microsoft.AspNetCore.Authorization
@using ClosedXML.Excel;
@inject WalletService _walletService
@inject IJSRuntime _jSRuntime


<h3>Admin Page</h3>

<EditForm Model="@dateRange" OnValidSubmit="@GenerateExcel">
    <div class="form-group">
        <label for="fromDate">From Date</label>
        <InputDate @bind-Value="dateRange.FromDate" class="form-control" />
    </div>
    <div class="form-group">
        <label for="toDate">To Date</label>
        <InputDate @bind-Value="dateRange.ToDate" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Generate Excel</button>
</EditForm>

@code {
    private DateRange dateRange = new();

    private async Task GenerateExcel()
    {
        // Call the API to retrieve data
        var Wallets = await _walletService.GetTransactionsBetweenDateRange(dateRange.FromDate,dateRange.ToDate);

        // Generate Excel file
        foreach (var wallet in Wallets)
        {
            var excelFile = GenerateExcelFile(wallet.Transactions,wallet.Name);
            await DownloadFile(excelFile, $"Transactions Report {wallet.Name} {DateTime.Now.Date}.xlsx");
        }
    }

    private byte[] GenerateExcelFile(List<TransactionDTO> data,string walletName)
    {      
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Donations");

        // Add headers
        worksheet.Cell(1, 1).Value = "Code";
        worksheet.Cell(1, 2).Value = "Type";
        worksheet.Cell(1, 3).Value = "Amount";
        worksheet.Cell(1, 4).Value = "Wallet";
        worksheet.Cell(1, 5).Value = "Date";
        worksheet.Cell(1, 6).Value = "Comment";
        worksheet.Cell(1, 7).Value = "FullName";
        worksheet.Cell(1, 8).Value = "Email";


        // Add data
        for (int i = 0; i < data.Count; i++)
        {
            worksheet.Cell(i + 2, 1).Value = data[i].Code;
            worksheet.Cell(i + 2, 2).Value = (data[i].TransactionType == TransactionType.IN ? "Deposit" : "Withdrawal");
            worksheet.Cell(i + 2, 3).Value = data[i].Amount;
            worksheet.Cell(i + 2, 4).Value = walletName;
            worksheet.Cell(i + 2, 5).Value = data[i].CreatedDate.ToShortDateString();
            worksheet.Cell(i + 2, 6).Value = data[i].Comment;
            worksheet.Cell(i + 2, 7).Value = data[i].FullName;
            worksheet.Cell(i + 2, 8).Value = data[i].Email;
        }

        // Save to memory stream
        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        return stream.ToArray();
    }

    private async Task DownloadFile(byte[] fileContent, string fileName)
    {
        using var stream = new MemoryStream(fileContent);
        var streamRef = new DotNetStreamReference(stream);
        await _jSRuntime.InvokeVoidAsync("downloadFile", fileName, streamRef);
    }

    public class DateRange
    {
        public DateTime FromDate { get; set; } = DateTime.Now.AddMonths(-1);
        public DateTime ToDate { get; set; } = DateTime.Now;
    }

  
}