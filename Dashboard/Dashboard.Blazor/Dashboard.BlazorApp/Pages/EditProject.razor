
@page "/edit-project/{id:long}"
@using Dashboard.BlazorApp.Services
@using Dashboard.Core.ProjectAggregate
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject ProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Administrator")]

<section class="main-section">
    <div class="centerized-box">
        <h1>
            <span class="r"><span class="text-primary">تعديل </span> <span class="text-secondary">المشروع</span></span>
        </h1>

        @if (loading)
        {
                <div class="text-center mt-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>جاري تحميل بيانات المشروع...</p>
                </div>
        }
        else if (project == null)
        {
                <div class="alert alert-danger">
                    لم يتم العثور على المشروع. يرجى التحقق من الرابط.
                </div>
        }
        else
        {
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3>@project.Name</h3>
                    <div>
                        <span class="badge @GetStatusBadgeClass(project.Status)">@project.Status</span>
                    </div>
                </div>

                <EditForm Model="@updateRequest" OnValidSubmit="@HandleValidSubmit" class="project-form">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-4">
                        <label for="status" class="form-label">الحالة</label>
                        <InputSelect id="status" class="form-control" @bind-Value="updateRequest.Status">
                            <option value="Planned">مخطط</option>
                            <option value="InProgress">قيد التنفيذ</option>
                            <option value="Completed">مكتمل</option>
                        </InputSelect>
                    </div>

                    <div class="mb-4">
                        <h4>الصور</h4>
                        <div class="d-flex mb-2">
                            <InputText class="form-control me-2" @bind-Value="newImage" placeholder="أدخل رابط الصورة" />
                            <button type="button" class="btn btn-secondary" @onclick="AddImage">إضافة</button>
                        </div>

                    @if (updateRequest.Images.Any())
                    {
                                <div class="row mt-3">
                            @foreach (var image in updateRequest.Images)
                            {
                                            <div class="col-md-4 mb-3 position-relative">
                                                <img src="@image" class="img-thumbnail w-100" style="height: 150px; object-fit: cover;" />
                                                <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0 m-2" 
                                                        @onclick="() => RemoveImage(image)">
                                                    <i class="bi bi-x"></i>
                                                </button>
                                            </div>
                            }
                                </div>
                    }
                    </div>

                    <div class="mb-4">
                        <h4>الفيديوهات</h4>
                        <div class="d-flex mb-2">
                            <InputText class="form-control me-2" @bind-Value="newVideo" placeholder="أدخل رابط الفيديو" />
                            <button type="button" class="btn btn-secondary" @onclick="AddVideo">إضافة</button>
                        </div>

                    @if (updateRequest.Videos.Any())
                    {
                                <div class="list-group mt-3">
                            @foreach (var video in updateRequest.Videos)
                            {
                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                <span class="text-truncate" style="max-width: 80%;">@video</span>
                                                <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveVideo(video)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                            }
                                </div>
                    }
                    </div>

                    <div class="mb-4">
                        <h4>المصاريف</h4>
                        <button type="button" class="btn btn-secondary mb-3" @onclick="AddNewExpense">إضافة مصروف جديد</button>

                    @if (project.Expenses.Any())
                    {
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>الاسم</th>
                                                <th>القيمة</th>
                                                <th>التاريخ</th>
                                                <th>الكود</th>
                                                <th>إجراءات</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                    @foreach (var expense in project.Expenses)
                                    {
                                                    <tr>
                                                        <td>@expense.Name</td>
                                                        <td>@expense.Value.ToString("N0")</td>
                                                        <td>@expense.Date.ToString("yyyy-MM-dd")</td>
                                                        <td>@expense.Code</td>
                                                        <td>
                                                            <button type="button" class="btn btn-sm btn-danger" 
                                                                    @onclick="() => ConfirmDeleteExpense(expense.Id)">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </td>
                                                    </tr>
                                    }
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <th colspan="1">الإجمالي:</th>
                                                <th>@project.TotalBudget.ToString("N0")</th>
                                                <th colspan="3"></th>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                    }
                    else
                    {
                                <div class="alert alert-info">
                                    لا توجد مصاريف لهذا المشروع بعد.
                                </div>
                    }

                    @if (showExpenseForm)
                    {
                                <div class="card mt-3 mb-4">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">إضافة مصروف جديد</h5>
                                        <button type="button" class="btn-close" @onclick="() => showExpenseForm = false"></button>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">الاسم</label>
                                                <InputText class="form-control" @bind-Value="newExpense.Name" />
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">القيمة</label>
                                                <InputNumber class="form-control" @bind-Value="newExpense.Value" />
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">التاريخ</label>
                                                <InputDate class="form-control" @bind-Value="newExpense.Date" />
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">الكود</label>
                                                <InputText class="form-control" @bind-Value="newExpense.Code" />
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">المحفظة</label>
                                                <InputSelect class="form-control" @bind-Value="newExpense.WalletName">
                                                    <option value="SYP">SYP Wallet</option>
                                                    <option value="USD">USD Wallet</option>
                                                </InputSelect>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <div class="form-check mt-4">
                                                    <InputCheckbox id="createTransaction" class="form-check-input" @bind-Value="newExpense.CreateTransaction" />
                                                    <label for="createTransaction" class="form-check-label">
                                                        إنشاء معاملة مالية تلقائياً
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="text-end mt-3">
                                            <button type="button" class="btn btn-primary" @onclick="SaveExpense">حفظ المصروف</button>
                                        </div>
                                    </div>
                                </div>
                    }
                    </div>

                    <div class="d-flex justify-content-between">
                  <button type="button" class="btn btn-secondary" @onclick="GoToProjects">إلغاء</button>
                  @if (isSubmitting)
                    {
                        <button type="button" class="btn btn-primary" disabled>
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            جاري الحفظ...
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit">
                            حفظ
                        </button>
                    }
                    </div>
                </EditForm>
        }
    </div>
</section>

<style>
    .project-form {
        background-color: #f9f9f9;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
</style>

@code {
    [Parameter] public long Id { get; set; }

    private ProjectDTO project;
    private UpdateProjectRequest updateRequest = new UpdateProjectRequest();
    private CreateExpenseRequest newExpense = new CreateExpenseRequest();

    private string newImage = string.Empty;
    private string newVideo = string.Empty;
    private bool loading = true;
    private bool isSubmitting = false;
    private bool showExpenseForm = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProject();
    }

    private async Task LoadProject()
    {
        loading = true;
        try
        {
            project = await ProjectService.GetProjectByIdAsync(Id);

            if (project != null)
            {
                updateRequest = new UpdateProjectRequest
                    {
                        Status = project.Status,
                        Images = project.Images.ToList(),
                        Videos = project.Videos.ToList()
                    };

                // Initialize a new expense with defaults
                newExpense = new CreateExpenseRequest
                    {
                        Date = DateTime.Now,
                        Code = $"EXP-{DateTime.Now.ToString("yyyyMMdd")}-{(project.Expenses.Count + 1).ToString("D3")}",
                        CreateTransaction = true,
                        WalletName = "SYP" // Default
                    };
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading project: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;

        try
        {
            var result = await ProjectService.UpdateProjectAsync(Id, updateRequest);

            if (result)
            {
                await JSRuntime.InvokeVoidAsync("alert", "تم تحديث المشروع بنجاح!");
                await LoadProject(); // Reload the project data
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "حدث خطأ أثناء تحديث المشروع");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"خطأ: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task SaveExpense()
    {
        if (string.IsNullOrWhiteSpace(newExpense.Name) || newExpense.Value <= 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "يرجى ملء جميع الحقول المطلوبة");
            return;
        }

        try
        {
            var result = await ProjectService.AddExpenseAsync(Id, newExpense);

            if (result)
            {
                await JSRuntime.InvokeVoidAsync("alert", "تمت إضافة المصروف بنجاح!");
                showExpenseForm = false;

                // Reset form and reload project
                newExpense = new CreateExpenseRequest
                    {
                        Date = DateTime.Now,
                        Code = $"EXP-{DateTime.Now.ToString("yyyyMMdd")}-{(project.Expenses.Count + 1).ToString("D3")}",
                        CreateTransaction = true,
                        WalletName = "SYP"
                    };

                await LoadProject();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "حدث خطأ أثناء إضافة المصروف");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"خطأ: {ex.Message}");
        }
    }

    private async Task ConfirmDeleteExpense(long expenseId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "هل أنت متأكد من رغبتك في حذف هذا المصروف؟"))
        {
            // In a real implementation, you would add an API endpoint to delete expenses
            // For now, we'll just reload the project
            await LoadProject();
        }
    }

    private void AddImage()
    {
        if (!string.IsNullOrWhiteSpace(newImage))
        {
            updateRequest.Images.Add(newImage);
            newImage = string.Empty;
        }
    }

    private void RemoveImage(string image)
    {
        updateRequest.Images.Remove(image);
    }

    private void AddVideo()
    {
        if (!string.IsNullOrWhiteSpace(newVideo))
        {
            updateRequest.Videos.Add(newVideo);
            newVideo = string.Empty;
        }
    }

    private void RemoveVideo(string video)
    {
        updateRequest.Videos.Remove(video);
    }

    private void AddNewExpense()
    {
        showExpenseForm = true;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Planned" => "bg-info",
            "InProgress" => "bg-primary",
            "Completed" => "bg-success",
            _ => "bg-secondary"
        };
    }
    private void GoToProjects()
    {
        NavigationManager.NavigateTo("/projects");
    }
}
 