@using Microsoft.AspNetCore.Components.Forms
@using Dashboard.BlazorApp.Services
@inject FileUploadService FileUploadService
@inject IJSRuntime JSRuntime

<div class="image-upload-container">
    <div class="upload-zone @(isDragging ? "dragging" : "")">
        <InputFile OnChange="HandleFileSelection" multiple="@Multiple"
                   accept=".jpg,.jpeg,.png,.gif"
                   class="hidden-file-input" id="@inputId" />

        <label for="@inputId" class="upload-label">
            @if (isUploading)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary"></div>
                    <p>جاري الرفع...</p>
                </div>
            }
            else
            {
                <div class="upload-placeholder">
                    <i class="bi bi-cloud-arrow-up"></i>
                    <p>اضغط هنا لاختيار صورة أو اسحب الصورة إلى هنا</p>
                </div>
            }
        </label>
    </div>

    @if (UploadedUrls != null && UploadedUrls.Any())
    {
        <div class="image-preview-container mt-3">
            <div class="row">
                @foreach (var url in UploadedUrls)
                {
                    <div class="col-md-4 col-6 mb-3">
                        <div class="image-preview">
                            <img src="@url" class="img-fluid rounded" alt="Uploaded image" />
                            <button type="button" class="btn-remove" @onclick="() => RemoveImage(url)">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .image-upload-container {
        margin-bottom: 1rem;
    }

    .upload-zone {
        border: 2px dashed #ccc;
        border-radius: 8px;
        padding: 2rem;
        text-align: center;
        transition: all 0.3s;
        cursor: pointer;
    }

        .upload-zone:hover, .upload-zone.dragging {
            border-color: #43936f;
            background-color: rgba(67, 147, 111, 0.05);
        }

    .hidden-file-input {
        display: none;
    }

    .upload-label {
        display: block;
        width: 100%;
        cursor: pointer;
    }

    .upload-placeholder {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

        .upload-placeholder i {
            font-size: 2rem;
            color: #43936f;
            margin-bottom: 1rem;
        }

    .image-preview {
        position: relative;
        border-radius: 4px;
        overflow: hidden;
        height: 150px;
    }

        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .btn-remove {
        position: absolute;
        top: 5px;
        right: 5px;
        background: rgba(255,255,255,0.7);
        border: none;
        border-radius: 50%;
        width: 25px;
        height: 25px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>

@code {
    [Parameter] public List<string> UploadedUrls { get; set; } = new List<string>();
    [Parameter] public EventCallback<List<string>> UploadedUrlsChanged { get; set; }
    [Parameter] public bool Multiple { get; set; } = true;

    private bool isDragging = false;
    private bool isUploading = false;
    private string inputId = $"file-input-{Guid.NewGuid()}";

    protected override void OnInitialized()
    {
        // Make sure UploadedUrls is never null
        if (UploadedUrls == null)
            UploadedUrls = new List<string>();
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        try
        {
            isUploading = true;
            StateHasChanged();

            var files = Multiple ? e.GetMultipleFiles(10) : new List<IBrowserFile> { e.File };

            foreach (var file in files)
            {
                try
                {
                    // Check file size
                    if (file.Size > 10 * 1024 * 1024) // 10MB
                    {
                        await JSRuntime.InvokeVoidAsync("alert", $"File {file.Name} is too large (max 10MB)");
                        continue;
                    }

                    var url = await FileUploadService.UploadImageAsync(file);

                    if (!string.IsNullOrEmpty(url))
                    {
                        if (!Multiple)
                            UploadedUrls.Clear();

                        UploadedUrls.Add(url);

                        if (!Multiple)
                            break;
                    }
                }
                catch (Exception ex)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Error uploading {file.Name}: {ex.Message}");
                }
            }

            await UploadedUrlsChanged.InvokeAsync(UploadedUrls);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private async Task RemoveImage(string url)
    {
        UploadedUrls.Remove(url);
        await UploadedUrlsChanged.InvokeAsync(UploadedUrls);
    }
}